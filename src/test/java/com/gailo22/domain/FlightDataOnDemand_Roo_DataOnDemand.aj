// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.gailo22.domain;

import com.gailo22.domain.Flight;
import com.gailo22.domain.FlightDataOnDemand;
import com.gailo22.domain.FlightDescription;
import com.gailo22.domain.FlightDescriptionDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect FlightDataOnDemand_Roo_DataOnDemand {
    
    declare @type: FlightDataOnDemand: @Component;
    
    private Random FlightDataOnDemand.rnd = new SecureRandom();
    
    private List<Flight> FlightDataOnDemand.data;
    
    @Autowired
    FlightDescriptionDataOnDemand FlightDataOnDemand.flightDescriptionDataOnDemand;
    
    public Flight FlightDataOnDemand.getNewTransientFlight(int index) {
        Flight obj = new Flight();
        setFlightDescription(obj, index);
        return obj;
    }
    
    public void FlightDataOnDemand.setFlightDescription(Flight obj, int index) {
        FlightDescription flightDescription = flightDescriptionDataOnDemand.getRandomFlightDescription();
        obj.setFlightDescription(flightDescription);
    }
    
    public Flight FlightDataOnDemand.getSpecificFlight(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Flight obj = data.get(index);
        Long id = obj.getFlightId();
        return Flight.findFlight(id);
    }
    
    public Flight FlightDataOnDemand.getRandomFlight() {
        init();
        Flight obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getFlightId();
        return Flight.findFlight(id);
    }
    
    public boolean FlightDataOnDemand.modifyFlight(Flight obj) {
        return false;
    }
    
    public void FlightDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Flight.findFlightEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Flight' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Flight>();
        for (int i = 0; i < 10; i++) {
            Flight obj = getNewTransientFlight(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
