// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.gailo22.domain;

import com.gailo22.domain.FlightDescription;
import com.gailo22.domain.FlightDescriptionDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect FlightDescriptionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: FlightDescriptionDataOnDemand: @Component;
    
    private Random FlightDescriptionDataOnDemand.rnd = new SecureRandom();
    
    private List<FlightDescription> FlightDescriptionDataOnDemand.data;
    
    public FlightDescription FlightDescriptionDataOnDemand.getNewTransientFlightDescription(int index) {
        FlightDescription obj = new FlightDescription();
        setDestinationCity(obj, index);
        setOriginCity(obj, index);
        setPrice(obj, index);
        return obj;
    }
    
    public void FlightDescriptionDataOnDemand.setDestinationCity(FlightDescription obj, int index) {
        String destinationCity = "destinationCity_" + index;
        if (destinationCity.length() > 20) {
            destinationCity = destinationCity.substring(0, 20);
        }
        obj.setDestinationCity(destinationCity);
    }
    
    public void FlightDescriptionDataOnDemand.setOriginCity(FlightDescription obj, int index) {
        String originCity = "originCity_" + index;
        if (originCity.length() > 20) {
            originCity = originCity.substring(0, 20);
        }
        obj.setOriginCity(originCity);
    }
    
    public void FlightDescriptionDataOnDemand.setPrice(FlightDescription obj, int index) {
        Float price = new Integer(index).floatValue();
        obj.setPrice(price);
    }
    
    public FlightDescription FlightDescriptionDataOnDemand.getSpecificFlightDescription(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        FlightDescription obj = data.get(index);
        Long id = obj.getFlightDescId();
        return FlightDescription.findFlightDescription(id);
    }
    
    public FlightDescription FlightDescriptionDataOnDemand.getRandomFlightDescription() {
        init();
        FlightDescription obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getFlightDescId();
        return FlightDescription.findFlightDescription(id);
    }
    
    public boolean FlightDescriptionDataOnDemand.modifyFlightDescription(FlightDescription obj) {
        return false;
    }
    
    public void FlightDescriptionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = FlightDescription.findFlightDescriptionEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'FlightDescription' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<FlightDescription>();
        for (int i = 0; i < 10; i++) {
            FlightDescription obj = getNewTransientFlightDescription(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
